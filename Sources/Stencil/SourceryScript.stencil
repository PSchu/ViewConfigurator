{% macro createSetter variable %}
    {{ variable.attributes.available }}
    func {{ variable.name }}(_ newValue: {{ variable.typeName }}) -> ConfigurationSet<Base> {
        return set{ ({{ type.name  }}: {{ type.name }}) in
            {{ type.name }}.{{variable.name}} = newValue
        }
    }
{% endmacro %}

{% macro newlineIfNotLast isLast %}
{% if not isLast %}

{% endif %}
{% endmacro %}

{% for type in types.implementing.SourceryGeneration|class %}
// sourcery:file:{{ type.name }}.swift
import UIKit
public extension ConfigurationSet where Base: {{ type.name }} {
    {% for method in type.methods|instance where not method.returnTypeName.isVoid and not method.isInitializer %}
    func {{ method.name }} -> ConfigurationSet<Base> {
        return set { ( {{type.name}}: Base ) in
            {{type.name}}.{{ method.callName }}({% for parameter in method.parameters %}{% if not parameter.argumentLabel == nil %}{{ parameter.argumentLabel }}: {{ parameter.name }}{% else %}{{ parameter.name }}{% endif %}{% if not forloop.last %}, {% endif %}{% endfor %})
        }
    }
    {% call newlineIfNotLast forloop.last %}
    {% endfor %}
    {% for variable in type.variables|openSet  %}
    {% call createSetter variable %}
    {% call newlineIfNotLast forloop.last %}
    {% endfor %}
    {% for variable in type.variables|publicSet  %}
    {% call createSetter variable %}
    {% call newlineIfNotLast forloop.last %}
    {% endfor %}
  
}

// sourcery:end
{% endfor %}
